<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>

<body>
  <!-- <input type="button" onclick="sayHello()" value="Say Hello" />
  !-->
  <div class = "container">
      <h1>IP Subnet Calculator</h1>
      <!--
      <div class = "row">
          <div class = "col-md-3" style = "background-color: #dedef8;
            box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
            <h4>First Column</h4>
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>
          </div>

          <div class = "col-md-9" style = "background-color: #dedef8;
            box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">

            <h4>Second Column- Split into 4 boxes</h4>
          <div class = "row">
                <div class = "col-md-6" style = "background-color: #B18904;
                  box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
                  <p>Consectetur art party Tonx culpa semiotics.
                  Pinterest assumenda minim organic quis.</p>
                </div>

                <div class = "col-md-6" style = "background-color: #B18904;
                box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
                <p>sed do eiusmod tempor incididunt ut labore et dolore magna
                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation
                  ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
              </div>

          </div>

         <div class = "row">

            <div class = "col-md-6" style = "background-color: #B18904;
               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">

               <p>quis nostrud exercitation ullamco laboris nisi ut aliquip
                  ex ea commodo consequat.</p>
            </div>

            <div class = "col-md-6" style = "background-color: #B18904;
               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">

               <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
                  sed do eiusmod tempor incididunt ut labore et dolore magna
                  aliqua. Ut enim ad minim.</p>
            </div>

         </div>

      </div>

   </div>
   !-->
   
   <!--
   <button type="button"
        onclick="showdate()"> Click me to display Date and Time.</button>
        <div id="myDIV" style="display: none">
          This is my DIV element.
          <p>Jakapong Klainongsuang</p>
        </div>
        !-->

        <form name="calform" method="get" action="" onsubmit="return false">
          <table id="ipv4table" cellpadding="3" class="panel" align="center" style="height:100%">
            <tr id="networl_class">
	             <td>Network Class</td>
	              <!--<td><label><input type="radio" value="any" checked onclick="popSubnet('a');" />Any</label> &nbsp; <label for="cclass1"><input type="radio" value="a"  onclick="popSubnet('a');" />A</label> &nbsp; <label for="cclass2"><input type="radio"  value="b" onclick="popSubnet('b');" />B</label> &nbsp; <label for="cclass3"><input type="radio"  value="c"  onclick="popSubnet('c');" />C</label></td>
                !-->
                <td>
                  <input type="radio" name="radio" id="radio1" value="radio1" checked onclick="popSubnet('any');" />
                  <label for="radio1" >Any</label>
                  <input type="radio" name="radio" id="radio2" value="radio2"  onclick="popSubnet('a');"/>
                  <label for="radio2" >A</label>
                  <input type="radio" name="radio" id="radio3" value="radio3"  onclick="popSubnet('b');"/>
                  <label for="radio3" >B</label>
                  <input type="radio" name="radio" id="radio4" value="radio4"  onclick="popSubnet('c');"/>
                  <label for="radio4" >C</label>
                </td>



              </tr>
              <tr>
	               <td>Subnet</td>
	                <td><select id="subnet">
                  <!--
                    <option selected="" selected="selected" disabled="true">Please Select</option>
                  !-->
                    <option>255.255.255.255/32</option>
                    <option>255.255.255.254/31</option>
                    <option>255.255.255.252/30</option>
                    <option>255.255.255.248/29</option>
                    <option>255.255.255.240/28</option>
                    <option>255.255.255.224/27</option>
                    <option>255.255.255.192/26</option>
                    <option>255.255.255.128/25</option>
                    <option>255.255.255.0/24</option>
                    <div id = "16-23">
                      <option class="c">255.255.254.0/23</option>
                      <option class="c">255.255.252.0/22</option>
                      <option class="c">255.255.248.0/21</option>
                      <option class="c">255.255.240.0/20</option>
                      <option class="c">255.255.224.0/19</option>
                      <option class="c">255.255.192.0/18</option>
                      <option class="c">255.255.128.0/17</option>
                      <option class="c">255.255.0.0/16</option>
                    </div>
                    <div id = "8-15">
                      <option class="b">255.254.0.0/15</option>
                      <option class="b">255.252.0.0/14</option>
                      <option class="b">255.248.0.0/13</option>
                      <option class="b">255.240.0.0/12</option>
                      <option class="b">255.224.0.0/11</option>
                      <option class="b">255.192.0.0/10</option>
                      <option class="b">255.128.0.0/9</option>
                      <option class="b">255.0.0.0/8</option>
                    </div>
                    <div id = '1-7'>
                      <option class="a">254.0.0.0/7</option>
                      <option class="a">252.0.0.0/6</option>
                      <option class="a">248.0.0.0/5</option>
                      <option class="a">240.0.0.0/4</option>
                      <option class="a">224.0.0.0/3</option>
                      <option class="a">192.0.0.0/2</option>
                      <option class="a">128.0.0.0/1</option>
                    </div>
                  </select>

                </td>
                 </tr>
                 <tr>
	                  <td>IP Address</td>
	                   <td><input type="text" name="cip" id="cip"  class="inlonger" placeholder="158.108.235.170"  pattern="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"></td>
                   </tr>
                   <tr>
	                    <td>&nbsp;</td>
                     <td> <input type="submit" name="calculate" value="calculate" onclick="check_result()"></td>

                    <!--
                    <td><button type="button" onclick="formAction()">submit</button> </td>
                    !-->
                    </table>
            </form>

            <div id = "show_result_head">
            </div>
            <div id = "show_result" class = "show_result">
            </div>
            <div id = "show_table_head">
            </div>
            <div id = "show_table" class = "show_table">
            </div>

        </div>

 <footer>By Jakapong Klainongsuang : 5810502245</footer>
</body>
</html>


<script type="text/javascript">
  function check_result() {
    var ip = document.getElementById("cip").value;
    var arr_ip = new Array();
    arr_ip = ip.split(".");
    var ip_1 = parseInt(arr_ip[0]);
    var ip_2 = parseInt(arr_ip[1]);
    var ip_3 = parseInt(arr_ip[2]);
    var ip_4 = parseInt(arr_ip[3]);
    if (ip.length === 0 || (ip_1<0 ||ip_1>255) || (ip_2<0 ||ip_2>255) || (ip_3<0 ||ip_3>255) || (ip_4<0 ||ip_4>255) ) {
      alert("please insert valid ip")
    }
    else {
      show_result()
    }
  }
  function show_result() {
    var subnet = document.getElementById("subnet").value;
    var ip = document.getElementById("cip").value;
    var subnet_pure = subnet.substring(0, subnet.indexOf('/'));
    var network_address = cal_network_address(subnet_pure,ip)
    var binary_subnet_mask = cal_binary_subnet_mask(subnet_pure);
    var host = cal_nb_host(subnet_pure);
    var usable_host = cal_usable_host(host);
    //find_type(subnet)
    var Wildcard_Mask = find_Wildcard_Mask(subnet_pure);
    var ip_type = find_ip_type(ip)
    var CIDR_Notation = find_CIDR_Notation(subnet);
    var Binary_ID = find_Binary_ID(ip);
    var Int_ID = find_Int_ID(ip);
    var Hex_ID = find_HEX_ID(Int_ID);
    var usable_length = find_all_possible(ip, subnet_pure, subnet, CIDR_Notation, network_address);
    var ip_class = find_type(subnet);
    /*
    document.getElementById("show_result").innerHTML = "Result"
                                                        +"</br>" + "IP Address: "+ip
                                                        +"</br>" + "Network Address: " + network_address
                                                        +"</br>" + "Usable Host IP Range: " + usable_length[1]
                                                        +"</br>" + "Broadcast Address: " + usable_length[2]
                                                        +"</br>" + "Total Number of Hosts: " + host
                                                        +"</br>" + "Number of Usable Hosts: " + usable_host
                                                        +"</br>" + "Subnet Mask:" + subnet_pure
                                                        +"</br>" + "Wildcard_Mask: " + Wildcard_Mask
                                                        +"</br>" + "Binary Subnet Mask:	 " + binary_subnet_mask
                                                        +"</br>" + "IP Class: " + ip_class
                                                        +"</br>" + "CIDR_Notation: " + CIDR_Notation
                                                        +"</br>" + "IP Type: " + ip_type
                                                        +"</br>" + "Short: " + ip + " "+CIDR_Notation
                                                        +"</br>" + "Binary ID: " + Binary_ID
                                                        +"</br>" + "Integer ID: " + Int_ID
                                                        +"</br>" + "HEX ID: " + Hex_ID;
    */
    document.getElementById("show_result_head").innerHTML = "<h1>IPv4 Subnet Calculator</h1>";
    document.getElementById("show_result").innerHTML = "<table style=\"width:100%\">"
                                                        + "<tr><td>IP Address: </td><td>"+ip+"</td> </tr>"
                                                        + "<tr><td>Network Address: </td><td>"+network_address+"</td> </tr>"
                                                        + "<tr><td>Usable Host IP Range: </td><td>"+usable_length[1]+"</td> </tr>"
                                                        + "<tr><td>Broadcast Address: </td><td>"+usable_length[2]+"</td> </tr>"
                                                        + "<tr><td>Total Number of Hosts: </td><td>"+host+"</td> </tr>"
                                                        + "<tr><td>Number of Usable Hosts: </td><td>"+usable_host+"</td> </tr>"
                                                        + "<tr><td>Subnet Mask: </td><td>"+subnet_pure+"</td> </tr>"
                                                        + "<tr><td>Wildcard_Mask: </td><td>"+Wildcard_Mask+"</td> </tr>"
                                                        + "<tr><td>Binary Subnet Mask:</td><td>"+ip+"</td> </tr>"
                                                        + "<tr><td>IP Class: </td><td>"+binary_subnet_mask+"</td> </tr>"
                                                        + "<tr><td>CIDR_Notation: </td><td>"+ip_class+"</td> </tr>"
                                                        + "<tr><td>IP Type: </td><td>"+CIDR_Notation+"</td> </tr>"
                                                        + "<tr><td>Short:</td><td>"+ip_type+"</td> </tr>"
                                                        + "<tr><td>Binary ID: </td><td>"+ip + " "+CIDR_Notation+"</td> </tr>"
                                                        + "<tr><td>Integer ID: </td><td>"+Binary_ID+"</td> </tr>"
                                                        + "<tr><td>HEX ID: </td><td>"+Hex_ID+"</td> </tr>"
                                                        + "</table>";

    //alert("I am an alert box!"+ a);
  }
  function find_all_possible(ip, subnet_pure, subnet, CIDR_Notation, network_address_template) {
      var type_subnet = find_type(subnet);
      //alert(type_subnet);
      if (type_subnet === "NA") {
        var arr_ip = new Array();
        arr_ip = ip.split(".");
        var ip_1 = 0;
        var ip_2 = 0;
        var ip_3 = 0;
        var ip_4 = 0;
        var arr = new Array();
        arr = subnet_pure.split(".");
        var subnet_1 = int_to_binary(parseInt(arr[0]));
        var increment =(subnet_1.match(/0/g) || []).length;
        increment = Math.pow(2,increment);
        //alert(increment);
        var table_arr = new Array();
        var text = "<table style=\"width:100%\">" + "<tr><th>Network Address</th><th>Usable Host Range</th> <th>Broadcast Address</th></tr>";
        while (ip_1 < 255) {
          network_address = ip_1+"."+ip_2+"."+ip_3+"."+ip_4;
          broadcast_address = (ip_1+increment-1)+"." + 255 + "."+ 255 +"."+255;
          usable = ip_1+"."+ip_2+"."+ip_3+"."+(ip_4+1) + " - " + (ip_1+increment-1)+"." + 255 + "."+ 255 +"."+254;
          //text = text + network_address + "  :  " + usable +"  :  "+ broadcast_address +"</br>"
          text += "<tr><td>" +network_address+"</td><td>"+ usable+"</td> <td>" +broadcast_address +"</td></tr>"
          table_arr.push([network_address, usable, broadcast_address]);
          if (network_address == network_address_template) {
            ans = [network_address, usable, broadcast_address]
          }
          ip_1 = ip_1 + increment;
        }
        if (table_arr.length > 1) {
          text += "</table>";
          document.getElementById("show_table_head").innerHTML = "<h1>"+"All Possible " +CIDR_Notation+ " Networks for "+ip_1+ "."+ip_2+ "."+ip_3+".*"+"</h1>";
          document.getElementById("show_table").innerHTML = text ;
        }
        //alert("eiei");
        return ans;
      }
      else if (type_subnet === "A") {
        var arr_ip = new Array();
        arr_ip = ip.split(".");
        var ip_1 = parseInt(arr_ip[0]);
        var ip_2 = 0;
        var ip_3 = 0;
        var ip_4 = 0;
        var arr = new Array();
        arr = subnet_pure.split(".");
        var subnet_2 = int_to_binary(parseInt(arr[1]));
        var increment =(subnet_2.match(/0/g) || []).length;
        increment = Math.pow(2,increment);
        //alert(increment);
        var table_arr = new Array();
        var text = "<table style=\"width:100%\">" + "<tr><th>Network Address</th><th>Usable Host Range</th> <th>Broadcast Address</th></tr>";
        while (ip_2 < 255) {
          network_address = ip_1+"."+ip_2+"."+ip_3+"."+ip_4;
          broadcast_address = ip_1+"."+(ip_2+increment-1)+"."+ 255 +"."+255;
          usable = ip_1+"."+ip_2+"."+ip_3+"."+(ip_4+1) + " - " + ip_1+"."+(ip_2+increment-1)+"."+ 255 +"."+254;
          //text = text + network_address + "  :  " + usable +"  :  "+ broadcast_address +"</br>"
          text += "<tr><td>" +network_address+"</td><td>"+ usable+"</td> <td>" +broadcast_address +"</td></tr>"
          table_arr.push([network_address, usable, broadcast_address]);
          if (network_address == network_address_template) {
            ans = [network_address, usable, broadcast_address]
          }
          ip_2 = ip_2 + increment;
        }

        if (table_arr.length > 1) {
          text += "</table>";
          document.getElementById("show_table_head").innerHTML = "<h1>"+"All Possible " +CIDR_Notation+ " Networks for "+ip_1+ "."+ip_2+ "."+ip_3+".*"+ "</h1>";
          document.getElementById("show_table").innerHTML = text ;
        }
        return ans;
      }
      else if (type_subnet === "B") {
        var arr_ip = new Array();
        arr_ip = ip.split(".");
        var ip_1 = parseInt(arr_ip[0]);
        var ip_2 = parseInt(arr_ip[1]);
        var ip_3 = 0;
        var ip_4 = 0;
        var arr = new Array();
        arr = subnet_pure.split(".");
        var subnet_3 = int_to_binary(parseInt(arr[2]));
        var increment =(subnet_3.match(/0/g) || []).length;
        increment = Math.pow(2,increment);
        //alert(increment);
        var table_arr = new Array();
        var text = "<table style=\"width:100%\">" + "<tr><th>Network Address</th><th>Usable Host Range</th> <th>Broadcast Address</th></tr>";
        while (ip_3 < 255) {
          network_address = ip_1+"."+ip_2+"."+ip_3+"."+ip_4;
          broadcast_address = ip_1+"."+ip_2+"."+(ip_3+increment-1)+"."+255;
          usable = ip_1+"."+ip_2+"."+ip_3+"."+(ip_4+1) + " - " + ip_1+"."+ip_2+"."+(ip_3+increment-1)+"."+254;
          //text = text + network_address + "  :  " + usable +"  :  "+ broadcast_address +"</br>"
          text += "<tr><td>" +network_address+"</td><td>"+ usable+"</td> <td>" +broadcast_address +"</td></tr>"
          table_arr.push([network_address, usable, broadcast_address]);
          if (network_address == network_address_template) {
            ans = [network_address, usable, broadcast_address]
          }
          ip_3 = ip_3 + increment;
        }

        if (table_arr.length > 1) {
          text += "</table>";
          document.getElementById("show_table_head").innerHTML = "<h1>"+"All Possible " +CIDR_Notation+ " Networks for "+ip_1+ "."+ip_2+ "."+ip_3+".*" + "</h1>";
          document.getElementById("show_table").innerHTML = text ;
        }
        return ans;
      }
      else if (type_subnet === "C") {
        var arr_ip = new Array();
        arr_ip = ip.split(".");
        var ip_1 = parseInt(arr_ip[0]);
        var ip_2 = parseInt(arr_ip[1]);
        var ip_3 = parseInt(arr_ip[2]);
        var ip_4 = 0;
        var arr = new Array();
        arr = subnet_pure.split(".");
        var subnet_4 = int_to_binary(parseInt(arr[3]));
        var increment =(subnet_4.match(/0/g) || []).length;
        increment = Math.pow(2,increment);
        //alert(increment);
        var table_arr = new Array();
        var text = "<table style=\"width:100%\">" + "<tr><th>Network Address</th><th>Usable Host Range</th> <th>Broadcast Address</th></tr>";
        while (ip_4 < 255) {
          network_address = ip_1+"."+ip_2+"."+ip_3+"."+ip_4;
          broadcast_address = ip_1+"."+ip_2+"."+ip_3+"."+(ip_4+increment-1);
          usable = ip_1+"."+ip_2+"."+ip_3+"."+(ip_4+1) + " - " + ip_1+"."+ip_2+"."+ ip_3+"."+(ip_4+increment-2);
          //text = text + network_address + "  :  " + usable +"  :  "+ broadcast_address +"</br>"
          text += "<tr><td>" +network_address+"</td><td>"+ usable+"</td> <td>" +broadcast_address +"</td></tr>"
          table_arr.push([network_address, usable, broadcast_address]);
          if (network_address == network_address_template) {
            ans = [network_address, usable, broadcast_address]
          }
          ip_4 = ip_4 + increment;
        }

        var check_32  = parseInt(CIDR_Notation.substring(1));

        if (check_32 === 32) {
          text = "";
            var ip_4 = parseInt(arr_ip[3]);
            table_arr = []
          network_address = ip_1+"."+ip_2+"."+ip_3+"."+ip_4;
          ans = ["NA", "NA", network_address];
        }
        //alert(table_arr.length);
        if (table_arr.length > 1) {
          text += "</table>";
          document.getElementById("show_table_head").innerHTML = "<h1>"+"All Possible " +CIDR_Notation+ " Networks for "+ip_1+ "."+ip_2+ "."+ip_3+".*" + "</h1>";
          document.getElementById("show_table").innerHTML = text ;
        }
        return ans;
      }
  }
  function find_HEX_ID(Int_ID){
    var hexStr = Int_ID.toString(16);
    hexStr = "0x" + hexStr;
    return hexStr;
  }
  function find_Int_ID(ip){
    var arr_ip = new Array();
    arr_ip = ip.split(".");
    var ip_1 = int_to_binary(parseInt(arr_ip[0]));
    var ip_2 = int_to_binary(parseInt(arr_ip[1]));
    var ip_3 = int_to_binary(parseInt(arr_ip[2]));
    var ip_4 = int_to_binary(parseInt(arr_ip[3]));
    var result = ip_1 + ip_2 + ip_3 + ip_4;
    result = parseInt(result,2);
    return result;
  }
  function find_Binary_ID(ip){
    var arr_ip = new Array();
    arr_ip = ip.split(".");
    var ip_1 = int_to_binary(parseInt(arr_ip[0]));
    var ip_2 = int_to_binary(parseInt(arr_ip[1]));
    var ip_3 = int_to_binary(parseInt(arr_ip[2]));
    var ip_4 = int_to_binary(parseInt(arr_ip[3]));
    var result = ip_1 + ip_2 + ip_3 + ip_4;
    return result;
  }
  function find_Wildcard_Mask(subnet_pure) {
    var arr = new Array();
    arr = subnet_pure.split(".");
    var subnet_1 = parseInt(arr[0]);
    var subnet_2 = parseInt(arr[1]);
    var subnet_3 = parseInt(arr[2]);
    var subnet_4 = parseInt(arr[3]);
    var result_1 = 255 - subnet_1;
    var result_2 = 255 - subnet_2;
    var result_3 = 255 - subnet_3;
    var result_4 = 255 - subnet_4;
    var result = result_1 + "." + result_2 + "." + result_3 + "." + result_4;
    return result;
  }
  function find_ip_type(ip) {
    var arr_ip = new Array();
    arr_ip = ip.split(".");
    var ip_1 = parseInt(arr_ip[0]);
    var ip_2 = parseInt(arr_ip[1]);
    var ip_3 = parseInt(arr_ip[2]);
    var ip_4 = parseInt(arr_ip[3]);
    if (ip == "10.0.0.0") {
      return "Private";
    }
    if (ip_1 === 172 && ip_3 === 0 && ip_4 === 0 && (ip_2>=16 && ip_2 <= 31)) {
      return "Private";
    }
    if (ip_1 === 192 && ip_2 === 168 && ip_4 === 0 && (ip_2>=0 && ip_2 <= 255)) {
      return "Private";
    }
    return "Pucblic";


  }
  function find_CIDR_Notation(subnet) {
    var type = subnet.split('/')[1];
    type = "/"+type;
    return type;
  }
  function find_type(subnet) {
  var type = subnet.split('/')[1];
  type = parseInt(type);
  var result = "";
  if (type <= 7) {
    result = "NA"
  }
  else if (type <= 15 ) {
    result = "A"
  }
  else if (type <= 23 ) {
    result = "B"
  }
  else if (type <= 32 ) {
    result = "C"
  }
  return result;
  //alert(result);
  }
  function cal_usable_host(host){
    if (host === 1) {
      return 0;
    }
    return (host-2)
  }
  function cal_nb_host(subnet_pure){
    var arr = new Array();
    arr = subnet_pure.split(".");
    var subnet_1 = int_to_binary(parseInt(arr[0]));
    var subnet_2 = int_to_binary(parseInt(arr[1]));
    var subnet_3 = int_to_binary(parseInt(arr[2]));
    var subnet_4 = int_to_binary(parseInt(arr[3]));
    var count1 = (subnet_1.match(/0/g) || []).length;
    var count2 = (subnet_2.match(/0/g) || []).length;
    var count3 = (subnet_3.match(/0/g) || []).length;
    var count4 = (subnet_4.match(/0/g) || []).length;
    var count = count1 + count2 + count3 + count4;
    var result = Math.pow(2, count);

    return result

  }
  function cal_binary_subnet_mask(subnet_pure){
    var arr = new Array();
    arr = subnet_pure.split(".");
    var subnet_1 = int_to_binary(parseInt(arr[0]));
    var subnet_2 = int_to_binary(parseInt(arr[1]));
    var subnet_3 = int_to_binary(parseInt(arr[2]));
    var subnet_4 = int_to_binary(parseInt(arr[3]));
    var result =  subnet_1+"."+ subnet_2+"."+ subnet_3+"."+ subnet_4;
    return result;

  }
  function cal_network_address(subnet_pure, ip) {
    var arr = new Array();
    arr = subnet_pure.split(".");
    var arr_ip = new Array();
    arr_ip = ip.split(".");
    //alert(arr.length);
    var subnet_1 = int_to_binary(parseInt(arr[0]));
    var subnet_2 = int_to_binary(parseInt(arr[1]));
    var subnet_3 = int_to_binary(parseInt(arr[2]));
    var subnet_4 = int_to_binary(parseInt(arr[3]));
    var ip_1 = int_to_binary(parseInt(arr_ip[0]));
    var ip_2 = int_to_binary(parseInt(arr_ip[1]));
    var ip_3 = int_to_binary(parseInt(arr_ip[2]));
    var ip_4 = int_to_binary(parseInt(arr_ip[3]));
    //var test = (parseInt('11001010', 2) & parseInt('1111', 2)).toString(2)
    var networl_address_1 = (parseInt(subnet_1, 2) & parseInt(ip_1, 2))
    var networl_address_2 = (parseInt(subnet_2, 2) & parseInt(ip_2, 2))
    var networl_address_3 = (parseInt(subnet_3, 2) & parseInt(ip_3, 2))
    var networl_address_4 = (parseInt(subnet_4, 2) & parseInt(ip_4, 2))
    //alert(subnet_1 + " " + subnet_2 + " " + subnet_3 + " " + subnet_4 + "</br>" + ip_1 + " " + ip_2 + " " + ip_3 + " " + ip_4 + "sss"+test);
    //document.getElementById("show_result").innerHTML = "ip address : " + networl_address_1+ "." + networl_address_2+ "." + networl_address_3+ "." + networl_address_4;
    //alert("ip address : " + networl_address_1+ "." + networl_address_2+ "." + networl_address_3+ "." + networl_address_4);
    var result = networl_address_1+ "." + networl_address_2+ "." + networl_address_3+ "." + networl_address_4;
    return result;

    //alert("I am an alert box!"+ fields);
  }

  function int_to_binary(number) {
    var result = number.toString(2);
    while (Math.floor(result.length %8) != 0) {
      result = "0" + result;
    }
    return result;
  }

  function popSubnet(type) {
    var eight_15 = document.getElementById("8-15");
    var one_7 = document.getElementById('1-7');
    var sixteen_23 = document.getElementById('16-23');
    if (type === "a") {
      $('.a').hide();
      $('.b').show();
      $('.c').show();
    }
    if (type === "b") {
      $('.a').hide();
      $('.b').hide();
      $('.c').show();
    }
    if (type === "c") {
      $('.a').hide();
      $('.b').hide();
      $('.c').hide();
    }
    if (type === "any") {
      $('.a').show();
      $('.b').show();
      $('.c').show();
      eight_15.style.display = "block";
      sixteen_23.style.display = "block";
      one_7.style.display = "block";
    }

  }
  function sayHello() {
    document.write("Hello World");
  }
  function showdate() {
    var x = document.getElementById('myDIV');
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
  }
  function validateForm() {
    var x = document.forms["myForm"]["fname"].value;
    if (x == "") {
        alert("Name must be filled out");
        return false;
    }
  }
  function myFunction() {
    var x = document.getElementById("mySelect");
    var i = x.selectedIndex;
    document.getElementById("demo").innerHTML = x.options[i].text;
  }
  function choice1(select) {
     alert(select.options[select.selectedIndex].text);
  }
</script>
